// example sets pin 21 to counter and sets to count-up to 100
// each input level change from 0 to 1 counts counter up by one
// pin 20 resets pin
// pin 16 is set if counter on limit 

"use strict";
const gpio = require("../gpio");

const COUNTER_PIN = 21;
const RESET_PIN = 16;
const OUTPUT_PIN = 20;
const DEBOUNCE_US = 1000; // us
const COUNTER_HIGH = 20;
const SCAN_TIME_MS = 10; // ms

var counter;
var counter_pre;

// init pins
gpio.init_gpio(COUNTER_PIN, gpio.GPIO_MODE_COUNTER_PULLUP, DEBOUNCE_US);
gpio.init_gpio(RESET_PIN, gpio.GPIO_MODE_INPUT_PULLUP, DEBOUNCE_US);
gpio.init_gpio(OUTPUT_PIN, gpio.GPIO_MODE_OUTPUT, 0);

// set hardware pins
gpio.set_counter_reset_pin(COUNTER_PIN, RESET_PIN);
gpio.set_counter_output_pin(COUNTER_PIN, OUTPUT_PIN);

// start up counter
gpio.set_counter(COUNTER_PIN, COUNTER_HIGH, gpio.C_DOWN);

// start scan loop
var loop_id = setInterval(() => {
    counter = gpio.get_counter(COUNTER_PIN);

    // check if counter changes
    if (counter !== counter_pre) {
        counter_pre = counter;
        console.log("counter: ", counter);
    }
}, SCAN_TIME_MS);

console.log("*** counter 2 example ***");
console.log("counts if pin", COUNTER_PIN, "is connected to ground");
console.log("counter is reset if pin", RESET_PIN, "is connected to ground");
console.log("output pin", OUTPUT_PIN, "is true if counter set to ", COUNTER_HIGH);
console.log("stop program with Ctrl+C");

// handle Ctrl+C
process.on('SIGINT', () => {
    clearInterval(loop_id);
    gpio.deinit_gpio(COUNTER_PIN);
    gpio.deinit_gpio(RESET_PIN);
    gpio.deinit_gpio(OUTPUT_PIN);
    process.exit();
});
